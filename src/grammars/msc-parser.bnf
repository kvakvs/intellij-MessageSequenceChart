{
    parserClass="se.clau.intellij_msc.parser.MscParser"
    parserUtilClass="se.clau.intellij_msc.parser.MscParserUtil"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Msc"
    psiImplClassSuffix="Impl"
    psiPackage="se.clau.intellij_msc.psi"
    psiImplPackage="se.clau.intellij_msc.psi.impl"

    elementTypeHolderClass="se.clau.intellij_msc.MscTypes"
    elementTypeClass="se.clau.intellij_msc.psi.MscElementType"
    tokenTypeClass="se.clau.intellij_msc.psi.MscTokenType"
    tokens = [
        space   = 'regexp:[\s\r\n]+'
        comment = 'regexp:(//|#).*'
        number  = 'regexp:\d+(\.\d*)?'
        id      = 'regexp:\p{Alpha}\w*'
        string  = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

//        MSC_KEYWORD     = "msc"

        COMMENT     = "<comment>"
        SEMICOLON   = ';'
        COMMA       = ','

        OPEN_CURLY  = '{'
        CLOSE_CURLY = '}'
        OPEN_SQUARE  = '['
        CLOSE_SQUARE = ']'

        ELLIPSIS    = '...'
        TRIPLE_BAR  = '|||'
        TRIPLE_DASH  = '---'
    ]
}

file ::= MSC_KEYWORD '{' element+ '}'

// contents inside msc { ... } - msc options, entity list or message links
element ::= (option_line | entity_list | skip | COMMENT)

// A key="value" option
option_line ::= option (',' option)* ';'
option ::= OPTION_NAME '=' STRING

// A word, entity, with optional [key=value] options block
entity_list ::= entity (',' entity)* ';'
private entity ::= (ENTITY_NAME | STRING) attr_block?

// A skip element, creates vertical spacing
private skip ::= (ELLIPSIS | TRIPLE_BAR | TRIPLE_DASH) attr_block? ';'

// a [key=value] attribute block
attr_block ::= '[' option (',' option)* ']'
